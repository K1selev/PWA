{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"src\", \"alt\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['photo-grid', $options.viewClass])\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.photos, (src, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"photo-item\"\n    }, [_createElementVNode(\"img\", {\n      src: src,\n      alt: 'Photo ' + (index + 1)\n    }, null, 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$options","viewClass","_Fragment","_renderList","$data","photos","src","index","key","_createElementVNode","alt","_hoisted_1"],"sources":["/Users/sergey/Desktop/Политех/Web/photo-grid-pwa/src/components/PhotoGrid.vue"],"sourcesContent":["<!-- <template>\n  <div :class=\"['photo-grid', viewClass]\">\n    <div v-for=\"(src, index) in photos\" :key=\"index\" class=\"photo-item\">\n      <img :src=\"src\" :alt=\"'Photo ' + (index + 1)\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PhotoGrid',\n  props: {\n    view: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      photos: [\n        require('@/assets/photos/photo1.jpg'),\n        require('@/assets/photos/photo2.jpg'),\n        require('@/assets/photos/photo3.jpg'),\n        require('@/assets/photos/photo4.jpg'),\n        require('@/assets/photos/photo5.jpg'),\n        require('@/assets/photos/photo6.jpg'),\n      ],\n    };\n  },\n  computed: {\n    viewClass() {\n      return this.view === 'three' ? 'grid-three' : 'grid-one';\n    },\n  },\n};\n</script>\n\n<style scoped>\n.photo-grid {\n  display: grid;\n  gap: 20px; /* Расстояние между изображениями */\n  padding: 40px; /* Отступы от краев экрана */\n  justify-content: center; /* Центрирование */\n}\n\n.grid-three {\n  grid-template-columns: repeat(3, minmax(150px, 1fr)); /* Колонки одинаковой ширины */\n}\n\n.grid-one {\n  grid-template-columns: repeat(1, minmax(150px, 1fr)); /* Одна колонка */\n}\n\n.photo-item {\n  aspect-ratio: 1 / 1; /* Сохраняет квадратный формат изображений */\n  overflow: hidden; /* Убирает лишнее содержимое */\n  border-radius: 10px; /* Закругление углов */\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Тени для объема */\n}\n\n.photo-item img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; /* Изображение заполняет контейнер, сохраняя пропорции */\n  display: block;\n  border: 2px solid #ddd; /* Граница изображений */\n}\n\n</style> -->\n\n\n<template>\n  <div :class=\"['photo-grid', viewClass]\">\n    <div v-for=\"(src, index) in photos\" :key=\"index\" class=\"photo-item\">\n      <img :src=\"src\" :alt=\"'Photo ' + (index + 1)\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PhotoGrid',\n  props: {\n    view: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      photos: [\n        require('@/assets/photos/photo1.jpg'),\n        require('@/assets/photos/photo2.jpg'),\n        require('@/assets/photos/photo3.jpg'),\n        require('@/assets/photos/photo4.jpg'),\n        require('@/assets/photos/photo5.jpg'),\n        require('@/assets/photos/photo6.jpg'),\n      ],\n    };\n  },\n  computed: {\n    viewClass() {\n      return this.view === 'three' ? 'grid-three' : 'grid-one';\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Общие стили для сетки изображений */\n.photo-grid {\n  display: grid;\n  gap: 20px; /* Отступы между изображениями */\n  padding: 20px; /* Отступ от краев экрана */\n}\n\n.grid-three {\n  grid-template-columns: repeat(3, minmax(150px, 1fr)); /* По 3 изображения в строке для больших экранов */\n}\n\n.grid-one {\n  grid-template-columns: 1fr; /* Одно изображение в строке */\n}\n\n/* Использование media queries для адаптации на маленьких экранах */\n@media (max-width: 767px) {\n  .photo-grid {\n    grid-template-columns: repeat(2, 1fr); /* На маленьких экранах по два изображения в строке */\n  }\n}\n\n.photo-item {\n  aspect-ratio: 1 / 1; /* Квадратные изображения */\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Тень */\n}\n\n.photo-item img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; /* Обрезка изображения */\n}\n</style>\n"],"mappings":";mBAAA;;uBAwEEA,mBAAA,CAIM;IAJAC,KAAK,EAxEbC,eAAA,gBAwE8BC,QAAA,CAAAC,SAAS;yBACnCJ,mBAAA,CAEMK,SAAA,QA3EVC,WAAA,CAyEgCC,KAAA,CAAAC,MAAM,EAzEtC,CAyEiBC,GAAG,EAAEC,KAAK;yBAAvBV,mBAAA,CAEM;MAF+BW,GAAG,EAAED,KAAK;MAAET,KAAK,EAAC;QACrDW,mBAAA,CAAgD;MAA1CH,GAAG,EAAEA,GAAG;MAAGI,GAAG,cAAcH,KAAK;4BA1E7CI,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}