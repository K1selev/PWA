{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"src\", \"alt\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(['photo-grid', $options.gridClass])\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.photos, (src, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"photo-item\"\n    }, [_createElementVNode(\"img\", {\n      src: src,\n      alt: 'Photo ' + (index + 1)\n    }, null, 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))], 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$options","gridClass","_Fragment","_renderList","$data","photos","src","index","key","_createElementVNode","alt","_hoisted_1"],"sources":["/Users/sergey/Desktop/Политех/Web/photo-grid-pwa/src/components/PhotoGrid.vue"],"sourcesContent":["<template>\n  <div :class=\"['photo-grid', gridClass]\">\n    <div v-for=\"(src, index) in photos\" :key=\"index\" class=\"photo-item\">\n      <img :src=\"src\" :alt=\"'Photo ' + (index + 1)\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PhotoGrid',\n  props: {\n    view: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      photos: [\n        require('@/assets/photos/photo1.jpg'),\n        require('@/assets/photos/photo2.jpg'),\n        require('@/assets/photos/photo3.jpg'),\n        require('@/assets/photos/photo4.jpg'),\n        require('@/assets/photos/photo5.jpg'),\n        require('@/assets/photos/photo6.jpg'),\n      ],\n    };\n  },\n  computed: {\n    gridClass() {\n      if (this.view === 'three') {\n        return 'grid-three';\n      } else {\n        return 'grid-one'; // Используем два изображения в строке для отображения с 1 фото\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.photo-grid {\n  display: grid;\n  gap: 20px;\n  padding: 20px;\n  box-sizing: border-box;\n}\n\n/* Стили для отображения 3 изображений в строке */\n.grid-three {\n  grid-template-columns: repeat(3, 1fr); /* Три изображения */\n}\n\n/* Стили для 1 изображения в строке (большая сетка) */\n.grid-one {\n  grid-template-columns: 1fr; /* Одно изображение в строке */\n}\n\n.photo-item {\n  aspect-ratio: 1 / 1; /* Пропорции для изображений */\n  overflow: hidden;\n  border-radius: 10px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.photo-item img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; /* Масштабирование с обрезкой */\n}\n\n/* Адаптация сетки на маленьких экранах */\n@media (max-width: 767px) {\n  .photo-grid {\n    grid-template-columns: repeat(2, 1fr); /* Два изображения на мобильных устройствах */\n  }\n}\n</style>\n"],"mappings":";mBAAA;;uBACEA,mBAAA,CAIM;IAJAC,KAAK,EADbC,eAAA,gBAC8BC,QAAA,CAAAC,SAAS;yBACnCJ,mBAAA,CAEMK,SAAA,QAJVC,WAAA,CAEgCC,KAAA,CAAAC,MAAM,EAFtC,CAEiBC,GAAG,EAAEC,KAAK;yBAAvBV,mBAAA,CAEM;MAF+BW,GAAG,EAAED,KAAK;MAAET,KAAK,EAAC;QACrDW,mBAAA,CAAgD;MAA1CH,GAAG,EAAEA,GAAG;MAAGI,GAAG,cAAcH,KAAK;4BAH7CI,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}